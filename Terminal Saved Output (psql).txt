Last login: Thu Nov 11 17:47:45 on ttys000
gavin@Gavins-MacBook-Pro ~ % mpsql  
psql (14.0)
Type "help" for help.

app=# SELECT * FROM users;
 uid | username | passwords 
-----+----------+-----------
(0 rows)

app=# SELECT * FROM chats;
 name | people 
------+--------
(0 rows)

app=# ALTER TABLE chats
app-# ADD COLUMN id SERIAL PRIMARY KEY;
ERROR:  multiple primary keys for table "chats" are not allowed
app=# DROP TABLE chats;
DROP TABLE
app=# CREATE TABLE chats (id SERIAL PRIMARY KEY, name text NOT NULL, people INT[] DEFAULT INT[]);
ERROR:  syntax error at or near "]"
LINE 1: ...RIMARY KEY, name text NOT NULL, people INT[] DEFAULT INT[]);
                                                                    ^
app=# CREATE TABLE chats (id SERIAL PRIMARY KEY, name text NOT NULL, people INT[] DEFAULT ARRAY[]::INT[]);
CREATE TABLE
app=# SELECT * FROM chats;
 id | name | people 
----+------+--------
(0 rows)

app=# CREATE OR REPLACE FUNCTION on_chat_create()
app-# RETURNS TRIGGER
app-# LANGUAGE PLPGSQL
app-# AS
app-# $$
app$# BEGIN
app$# CREATE TABLE NEW.id || '_content' (sender int NOT NULL, message text NOT NULL);
app$# END;
app$# $$;
ERROR:  syntax error at or near "||"
LINE 7: CREATE TABLE NEW.id || '_content' (sender int NOT NULL, mess...
                            ^
app=# CREATE OR REPLACE FUNCTION on_chat_create()
app-# RETURNS TRIGGER
app-# LANGUAGE PLPGSQL
app-# AS 
app-# $$
app$# BEGIN
app$# CREATE TABLE NEW.id (sender int NOT NULL, message text NOT NULL);
app$# END;
app$# $$;
CREATE FUNCTION
app=# CREATE TRIGGER chat_created
app-# AFTER UPDATE 
app-# ON chats
app-# OR EACH ROW
app-# EXECUTE PROCEDURE on_chat_create();
ERROR:  syntax error at or near "OR"
LINE 4: OR EACH ROW
        ^
app=# CREATE TRIGGER chat_created
app-# AFTER UPDATE 
app-# ON chats
app-# FOR EACH ROW
app-# EXECUTE PROCEDURE on_chat_create();
CREATE TRIGGER
app=# INSERT INTO users
app-# VALUES ('test_user_1', '12345');
ERROR:  invalid input syntax for type integer: "test_user_1"
LINE 2: VALUES ('test_user_1', '12345');
                ^
app=# ALTER TABLE users
app-# ALTER COLUMN uid SERIAL PRIMARY KEY;
ERROR:  syntax error at or near "SERIAL"
LINE 2: ALTER COLUMN uid SERIAL PRIMARY KEY;
                         ^
app=# ALTER TABLE users
app-# ALTER COLUMN uid TYPE SERIAL PRIMARY KEY;
ERROR:  syntax error at or near "PRIMARY"
LINE 2: ALTER COLUMN uid TYPE SERIAL PRIMARY KEY;
                                     ^
app=# ALTER TABLE users
app-# ALTER COLUMN uid TYPE SERIAL;
ERROR:  type "serial" does not exist
app=# INSERT INTO users
app-# (username, password)
app-# VALUES ('testuser_1', '12345');
ERROR:  column "password" of relation "users" does not exist
LINE 2: (username, password)
                   ^
app=# ALTER TABLE users
app-# RENAME COLUMN passwords TO password;
ALTER TABLE
app=# INSERT INTO users
app-# (username, password)
app-# VALUES ('testuser_1', '12345');
INSERT 0 1
app=# SELECT * FROM users;
 uid |  username  | password 
-----+------------+----------
   2 | testuser_1 | 12345
(1 row)

app=# INSERT INTO chats (name, people) VALUES ('testchat_1', ARRAY[2]);
INSERT 0 1
app=# SELECT * FROM chats;
 id |    name    | people 
----+------------+--------
  1 | testchat_1 | {2}
(1 row)

app=# SELECT * FROM "1";
ERROR:  relation "1" does not exist
LINE 1: SELECT * FROM "1";
                      ^
app=# CREATE OR REPLACE FUNCTION on_chat_create()
app-# RETURNS TRIGGER
app-# LANGUAGE PLPGSQL
app-# AS
app-# $$
app$# BEGIN
app$# CREATE TABLE CONCAT("chat_", CAST(NEW.id AS text)) (sender int NOT NULL, message text NOT NULL);
app$# END;
app$# $$;
ERROR:  syntax error at or near "CAST"
LINE 7: CREATE TABLE CONCAT("chat_", CAST(NEW.id AS text)) (sender i...
                                     ^
app=# CREATE OR REPLACE FUNCTION on_chat_create() RETURNS TRIGGER LANGUAGE PLPGSQL AS $$ BEGIN CREATE TABLE CONCAT('chat_', NEW.id) END; $$;
ERROR:  syntax error at or near "'chat_'"
LINE 1: ... LANGUAGE PLPGSQL AS $$ BEGIN CREATE TABLE CONCAT('chat_', N...
                                                             ^
app=# CREATE OR REPLACE FUNCTION on_chat_create() RETURNS TRIGGER LANGUAGE PLPGSQL AS $$ BEGIN CREATE TABLE CONCAT("chat_", NEW.id) END; $$;
ERROR:  syntax error at or near "."
LINE 1: ...PGSQL AS $$ BEGIN CREATE TABLE CONCAT("chat_", NEW.id) END; ...
                                                             ^
app=# CREATE OR REPLACE FUNCTION on_chat_create() RETURNS TRIGGER LANGUAGE PLPGSQL AS $$ BEGIN CREATE TABLE chat END; $$;
ERROR:  syntax error at or near "END"
LINE 1: ...GGER LANGUAGE PLPGSQL AS $$ BEGIN CREATE TABLE chat END; $$;
                                                               ^
app=# CREATE OR REPLACE FUNCTION on_chat_create() RETURNS TRIGGER LANGUAGE PLPGSQL AS $$ BEGIN CREATE TABLE chat (sender int NOT NULL, message text NOT NULL); END; $$;
CREATE FUNCTION
app=# INSERT INTO chats (name, people) VALUES ('testchat_1', ARRAY[2]);
INSERT 0 1
app=# SELECT * FROM chats;
 id |    name    | people 
----+------------+--------
  1 | testchat_1 | {2}
  2 | testchat_1 | {2}
(2 rows)

app=# SELECT * FROM chat;
ERROR:  relation "chat" does not exist
LINE 1: SELECT * FROM chat;
                      ^
app=# DROP FUNCTION on_chat_create();
ERROR:  cannot drop function on_chat_create() because other objects depend on it
DETAIL:  trigger chat_created on table chats depends on function on_chat_create()
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
app=# DROP FUNCTION on_chat_create() CASCADE;
NOTICE:  drop cascades to trigger chat_created on table chats
DROP FUNCTION
app=# CREATE OR REPLACE FUNCTION on_chat_create()
app-# RETURNS TRIGGER
app-# LANGUAGE PLPGSQL
app-# AS $$
app$# BEGIN
app$# CREATE TABLE 'chat'||NEW.id (sender int NOT NULL, message text NOT NULL);
app$# END;
app$# $$;
ERROR:  syntax error at or near "'chat'"
LINE 6: CREATE TABLE 'chat'||NEW.id (sender int NOT NULL, message te...
                     ^
app=# CREATE OR REPLACE FUNCTION on_chat_create()
app-# RETURNS TRIGGER
app-# LANGUAGE PLPGSQL
app-# AS $$
app$# BEGIN
app$# CREATE TABLE CONCAT('chat',NEW.id) (sender int NOT NULL, message text NOT NULL);
app$# END;
app$# $$;
ERROR:  syntax error at or near "'chat'"
LINE 6: CREATE TABLE CONCAT('chat',NEW.id) (sender int NOT NULL, mes...
                            ^
app=# CREATE OR REPLACE FUNCTION on_chat_create()
app-# RETURNS TRIGGER
app-# LANGUAGE PLPGSQL
app-# AS $$
app$# BEGIN
app$# CREATE TABLE CONCAT(chat,NEW.id) (sender int NOT NULL, message text NOT NULL);
app$# END;
app$# $$;
ERROR:  syntax error at or near "."
LINE 6: CREATE TABLE CONCAT(chat,NEW.id) (sender int NOT NULL, messa...
                                    ^
app=# CREATE OR REPLACE FUNCTION log_last_name_changes()
app-#   RETURNS TRIGGER 
app-#   LANGUAGE PLPGSQL
app-#   AS
app-# $$
app$# BEGIN
app$# IF NEW.last_name <> OLD.last_name THEN
app$# 

app$#  INSERT INTO employee_audits(employee_id,last_name,changed_on)
app$# 
OVERRIDING SELECT     TABLE      VALUES    
app$#  VALUES(OLD.id,OLD.last_name,now());
app$# END IF;
app$# 
app$# RETURN NEW;
app$# END;
app$# $$
app-# ;
CREATE FUNCTION
app=# drop function log_last_name_changes();
DROP FUNCTION
app=# CREATE OR REPLACE FUNCTION on_chat_create()
app-# RETURNS TRIGGER
app-# LANGUAGE PLPGSQL
app-# AS
app-# $$
app$# BEGIN
app$# DECLARE chat_id int;
app$# \set chat_id NEW.id;
app$# CREATE TABLE 'chat'
app$# || :chat_id (sender int NOT NULL, message text NOT NULL);
app$# END;
app$# $$;
ERROR:  syntax error at or near "\"
LINE 8: \set chat_id NEW.id;
        ^
app=# CREATE OR REPLACE FUNCTION on_chat_create()
app-# RETURNS TRIGGER
app-# LANGUAGE PLPGSQL
app-# AS
app-# $$
app$# BEGIN
app$# DECLARE chat_id int;
app$# set chat_id NEW.id;
app$# CREATE TABLE 'chat'
app$# || :chat_id (sender int NOT NULL, message text NOT NULL);
app$# END;
app$# $$;
ERROR:  syntax error at or near "NEW"
LINE 8: set chat_id NEW.id;
                    ^
CONTEXT:  invalid type name "chat_id NEW.id"
app=# CREATE OR REPLACE FUNCTION on_chat_create()
app-# RETURNS TRIGGER
app-# LANGUAGE PLPGSQL
app-# AS
app-# $$
app$# BEGIN
app$# chat_id int := NEW.id;
app$# CREATE TABLE 'chat'
app$# || :chat_id (sender int NOT NULL, message text NOT NULL);
app$# END;
app$# $$;
ERROR:  syntax error at or near "chat_id"
LINE 7: chat_id int := NEW.id;
        ^
app=# CREATE OR REPLACE FUNCTION on_chat_create()
app-# RETURNS TRIGGER
app-# LANGUAGE PLPGSQL
app-# AS
app-# $$
app$# BEGIN
app$# DECLARE chat_id int := NEW.id;
app$# CREATE TABLE 'chat'
app$# || :chat_id (sender int NOT NULL, message text NOT NULL);
app$# END;
app$# $$;
ERROR:  syntax error at or near "TABLE"
LINE 8: CREATE TABLE 'chat'
               ^
CONTEXT:  invalid type name "TABLE 'chat'
|| :chat_id (sender int "
app=# CREATE OR REPLACE FUNCTION on_chat_create()
app-# RETURNS TRIGGER
app-# LANGUAGE PLPGSQL
app-# AS
app-# $$
app$# DECLARE chat_id int := NEW.id;
app$# BEGIN
app$# CREATE TABLE 'chat_%' (sender int NOT NULL, message text NOT NULL),
app$# chat_id;
app$# END;
app$# $$;
ERROR:  syntax error at or near "'chat_%'"
LINE 8: CREATE TABLE 'chat_%' (sender int NOT NULL, message text NOT...
                     ^
app=# CREATE OR REPLACE FUNCTION on_chat_create()
app-# RETURNS TRIGGER
app-# LANGUAGE PLPGSQL
app-# AS
app-# $$
app$# DECLARE chat_id int := NEW.id;
app$# BEGIN
app$# CREATE TABLE "chat_%" (sender int NOT NULL, message text NOT NULL),
app$# chat_id;
app$# END;
app$# $$;
ERROR:  syntax error at or near ","
LINE 8: ...TABLE "chat_%" (sender int NOT NULL, message text NOT NULL),
                                                                      ^
app=# CREATE OR REPLACE FUNCTION on_chat_create()
app-# RETURNS TRIGGER
app-# LANGUAGE PLPGSQL
app-# AS
app-# $$
app$# DECLARE chat_id int := NEW.id;
app$# BEGIN
app$# CREATE TABLE "chat_" || :'chat_id' (sender int NOT NULL, message text NOT NULL);
app$# END;
app$# $$;
ERROR:  syntax error at or near "||"
LINE 8: CREATE TABLE "chat_" || :'chat_id' (sender int NOT NULL, mes...
                             ^
app=# CREATE OR REPLACE FUNCTION on_chat_create()
app-# RETURNS TRIGGER
app-# LANGUAGE PLPGSQL
app-# AS
app-# $$
app$# DECLARE chat_id int := NEW.id;
app$# BEGIN
app$# CREATE TABLE CONCAT("chat_",:'chat_id') (sender int NOT NULL, message text NOT NULL);
app$# END;
app$# $$;
ERROR:  syntax error at or near ":"
LINE 8: CREATE TABLE CONCAT("chat_",:'chat_id') (sender int NOT NULL...
                                    ^
app=# CREATE OR REPLACE FUNCTION on_chat_create()
app-# RETURNS TRIGGER
app-# LANGUAGE PLPGSQL
app-# AS
app-# $$
app$# DECLARE chat_id int := NEW.id;
app$# BEGIN
app$# CREATE TABLE CONCAT('chat_',:'chat_id') (sender int NOT NULL, message text NOT NULL);
app$# END;
app$# $$;
ERROR:  syntax error at or near "'chat_'"
LINE 8: CREATE TABLE CONCAT('chat_',:'chat_id') (sender int NOT NULL...
                            ^
app=# CREATE OR REPLACE FUNCTION on_chat_create()
app-# RETURNS TRIGGER
app-# LANGUAGE PLPGSQL
app-# AS
app-# $$
app$# DECLARE chat_id int := NEW.id;
app$# BEGIN
app$# CREATE TABLE CONCAT("chat_",chat_id::text) (sender int NOT NULL, message text NOT NULL);
app$# END;
app$# $$;
ERROR:  syntax error at or near "::"
LINE 8: CREATE TABLE CONCAT("chat_",chat_id::text) (sender int NOT N...
                                           ^
app=# CREATE OR REPLACE FUNCTION on_chat_create()
app-# RETURNS TRIGGER
app-# LANGUAGE PLPGSQL
app-# AS
app-# $$
app$# DECLARE chat_id int := NEW.id;
app$# BEGIN
app$# EXECUTE 'CREATE TABLE ' || quote_ident(chat_id) || '(sender int NOT NULL, message text NOT NULL);';
app$# END;
app$# $$;
CREATE FUNCTION
app=# CREATE TRIGGER chat_create
app-# AFTER UPDATE
app-# ON chats
app-# FOR EACH ROW
app-# EXECUTE PROCEDURE on_chat_create();
CREATE TRIGGER
app=# SELECT * FROM USERS
app-# ;
 uid |  username  | password 
-----+------------+----------
   2 | testuser_1 | 12345
(1 row)

app=# select * from chats;
 id |    name    | people 
----+------------+--------
  1 | testchat_1 | {2}
  2 | testchat_1 | {2}
(2 rows)

app=# DELETE FROM chats;
DELETE 2
app=# INSERT INTO chats (name, people) VALUES ('testchat_1', ARRAY[1]);
INSERT 0 1
app=# SELECT * FROM chats;
 id |    name    | people 
----+------------+--------
  3 | testchat_1 | {1}
(1 row)

app=# SELECT * FROM chat_3;
ERROR:  relation "chat_3" does not exist
LINE 1: SELECT * FROM chat_3;
                      ^
app=# SELECT * FROM "chat_3";
ERROR:  relation "chat_3" does not exist
LINE 1: SELECT * FROM "chat_3";
                      ^
app=# SELECT * FROM pg.catalogasdfa;
ERROR:  relation "pg.catalogasdfa" does not exist
LINE 1: SELECT * FROM pg.catalogasdfa;
                      ^
app=# \dt
       List of relations
 Schema | Name  | Type  | Owner 
--------+-------+-------+-------
 public | chats | table | gavin
 public | users | table | gavin
(2 rows)

app=# CREATE OR REPLACE FUNCTION on_chat_create() RETURNS TRIGGER LANGUAGE PLPGSQL AS $$ DECLARE chat_id int := NEW.id; BEGIN EXECUTE 'CREATE TABLE ' || quote_ident(chat_id) || '(sender int NOT NULL, message text NOT NULL);RAISE NOTICE \'test notice: \' || quote_ident(chat_id);'; END; $$;
ERROR:  syntax error at or near "notice"
LINE 1: ... NULL, message text NOT NULL);RAISE NOTICE \'test notice: \'...
                                                             ^
app=# CREATE OR REPLACE FUNCTION on_chat_create() RETURNS TRIGGER LANGUAGE PLPGSQL AS $$ DECLARE chat_id int := NEW.id; BEGIN EXECUTE 'CREATE TABLE ' || quote_ident(chat_id) || '(sender int NOT NULL, message text NOT NULL);RAISE NOTICE "test notice " || quote_ident(chat_id);'; END; $$;
CREATE FUNCTION
app=# on_chat_create()
app-# ;
ERROR:  syntax error at or near "on_chat_create"
LINE 1: on_chat_create()
        ^
app=# EXECUTE PROCEDURE on_chat_create()l
app-# ;
ERROR:  syntax error at or near "on_chat_create"
LINE 1: EXECUTE PROCEDURE on_chat_create()l
                          ^
app=# INSERT INTO chats VALUES (1, 'testchat_1', ARRAY[1
app(# ]);
INSERT 0 1
app=# RAISE NOTICE 'test';
ERROR:  syntax error at or near "RAISE"
LINE 1: RAISE NOTICE 'test';
        ^
app=# DROP FUNCTION on_chat_create() CASCADING;
ERROR:  syntax error at or near "CASCADING"
LINE 1: DROP FUNCTION on_chat_create() CASCADING;
                                       ^
app=# drop function on_chat_create() cascade;
NOTICE:  drop cascades to trigger chat_create on table chats
DROP FUNCTION
app=# CREATE TABLE chats_log (chatid int NOT NULL);
CREATE TABLE
app=# CREATE FUNCTION log_chat()
app-# RETURNS TRIGGER
app-# LANGUAGE PLPGSQL
app-# AS $$
app$# BEGIN
app$# INSERT INTO chats_log VALUES (NEW.id);
app$# END;
app$# $$;
CREATE FUNCTION
app=# CREATE TRIGGER logchat
app-# BEFORE UPDATE
app-# ON chats
app-# FOR EACH ROW
app-# EXECUTE PROCEDURE log_chat();
CREATE TRIGGER
app=# INSERT INTO chats VALUES (1, 'TESTCHAT', ARRAY[1]);
ERROR:  duplicate key value violates unique constraint "chats_pkey"
DETAIL:  Key (id)=(1) already exists.
app=# INSERT INTO chats VALUES (0, 'TESTCHAT', ARRAY[1]);
INSERT 0 1
app=# SELECT * FROM CHATS;
 id |    name    | people 
----+------------+--------
  3 | testchat_1 | {1}
  1 | testchat_1 | {1}
  0 | TESTCHAT   | {1}
(3 rows)

app=# SELECT * FROM CHATS_LOG;
 chatid 
--------
(0 rows)

app=# CREATE OR REPLACE FUNCTION log_chat()
app-# RETURNS TRIGGER AS $$
app$# BEGIN
app$# CREATE FUNCTION log_chat()                                                                                                                                                                            RETURNS TRIGGER AS $$                                                                                                                                                                                       app-# BEGIN
app-# NEW.name = 'name';
app-# end;
ERROR:  syntax error at or near "NEW"
LINE 7: NEW.name = 'name';
        ^
app=# CREATE OR REPLACE FUNCTION log_chat()
app-# RETURNS TRIGGER AS $$
app$# BEGIN
app$# NEW.name := 'name';
app$# RETURN NEW;
app$# END;
app$# $$ LANGAUGE PLPGSQL;
ERROR:  syntax error at or near "LANGAUGE"
LINE 7: $$ LANGAUGE PLPGSQL;
           ^
app=# CREATE OR REPLACE FUNCTION log_chat() RETURNS TRIGGER AS $$ BEGIN NEW.name := 'name'; RETURN NEW; END; $$;
ERROR:  no language specified
app=# CREATE OR REPLACE FUNCTION log_chat() RETURNS TRIGGER LANGUAGE PLPGSQL AS $$ BEGIN NEW.name := 'name'; RETURN NEW; END; $$;
CREATE FUNCTION
app=# CREATE TRIGGER log_chat BEFORE INSERT ON chats FOR EACH ROW EXECUTE PROCEDURE log_chat();
CREATE TRIGGER
app=# SELECT * FROM CHATS;
 id |    name    | people 
----+------------+--------
  3 | testchat_1 | {1}
  1 | testchat_1 | {1}
  0 | TESTCHAT   | {1}
(3 rows)

app=# INSERT INTO CHATS (NAME, PEOPLE) VALUES ('TESTNAME', ARRAY[1]);
INSERT 0 1
app=# SELECT * FROM CHATS;
 id |    name    | people 
----+------------+--------
  3 | testchat_1 | {1}
  1 | testchat_1 | {1}
  0 | TESTCHAT   | {1}
  4 | name       | {1}
(4 rows)

app=# CREATE OR REPLACE FUNCTION log_chat() RETURNS TRIGGER LANGUAGE PLPGSQL AS $$ BEGIN CREATE TABLE 'chat_' || NEW.id (sender int NOT NULL, message text NOT NULL); END; $$;
ERROR:  syntax error at or near "'chat_'"
LINE 1: ...TRIGGER LANGUAGE PLPGSQL AS $$ BEGIN CREATE TABLE 'chat_' ||...
                                                             ^
app=# DROP FUNCTION log_chat() CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to trigger logchat on table chats
drop cascades to trigger log_chat on table chats
DROP FUNCTION
app=# FORMAT('VAR: %L' SELECT username FROM users WHERE uid = 3);
ERROR:  syntax error at or near "FORMAT"
LINE 1: FORMAT('VAR: %L' SELECT username FROM users WHERE uid = 3);
        ^
app=# SELECT FORMAT('Hello, %s','PostgreSQL');
      format       
-------------------
 Hello, PostgreSQL
(1 row)

app=# test_var text := 'hello, world';
ERROR:  syntax error at or near "test_var"
LINE 1: test_var text := 'hello, world';
        ^
app=# declare test_var text := 'hellp, world';
ERROR:  syntax error at or near "text"
LINE 1: declare test_var text := 'hellp, world';
                         ^
app=# declare test_var := 'hello, world';
ERROR:  syntax error at or near ":="
LINE 1: declare test_var := 'hello, world';
                         ^
app=# CREATE FUNCTION create_chat_table() RETURNS TRIGGER LANGAUGE PLPGSQL AS $$ BEGIN CREATE TABLE (SELECT FORMAT('chat_%I', NEW.id)) (sender int NOT NULL, message text NOT NULL); END; $$;
ERROR:  syntax error at or near "LANGAUGE"
LINE 1: ...EATE FUNCTION create_chat_table() RETURNS TRIGGER LANGAUGE P...
                                                             ^
app=# CREATE FUNCTION create_chat_table() RETURNS TRIGGER AS $$ BEGIN CREATE TABLE (SELECT FORMAT('chat_%I', NEW.id)) (sender int NOT NULL, message text NOT NULL); END; $$ LANGAGUE PLPGSQL;
ERROR:  syntax error at or near "LANGAGUE"
LINE 1: ...der int NOT NULL, message text NOT NULL); END; $$ LANGAGUE P...
                                                             ^
app=# CREATE FUNCTION create_chat_table() RETURNS TRIGGER AS $$ BEGIN CREATE TABLE (SELECT FORMAT('chat_%I', NEW.id)) (sender int NOT NULL, message text NOT NULL); END; $$ LANGUAGE PLPGSQL;
ERROR:  syntax error at or near "("
LINE 1: ..._table() RETURNS TRIGGER AS $$ BEGIN CREATE TABLE (SELECT FO...
                                                             ^
app=# CREATE FUNCTION create_chat_table() RETURNS TRIGGER AS $$ BEGIN CREATE TABLE (SELECT FORMAT('chat_%I', NEW.id)) (sender int NOT NULL, message text NOT NULL); END; $$ LANGAGUE PLPGSQSDFASDFSL;
ERROR:  syntax error at or near "LANGAGUE"
LINE 1: ...der int NOT NULL, message text NOT NULL); END; $$ LANGAGUE P...
                                                             ^
app=# CREATE FUNCTION create_chat_table() RETURNS TRIGGER AS $$ BEGIN EXECUTE('CREATE TABLE (SELECT FORMAT(\'chat_%I\', NEW.id)) (sender int NOT NULL, message text NOT NULL)'); END; $$ LANGUAGE PLPGSQL;
ERROR:  syntax error at or near "chat_"
LINE 1: ...S $$ BEGIN EXECUTE('CREATE TABLE (SELECT FORMAT(\'chat_%I\',...
                                                             ^
app=# 
app=# 
app=# CREATE FUNCTION create_chat_table() RETURNS TRIGGER AS $$ BEGIN EXECUTE('CREATE TABLE chat_' || NEW.id || ' (sender int NOT NULL, message text NOT NULL);'); END; $$ LANGUAGE PLPGSQL;
CREATE FUNCTION
app=# CREATE TRIGGER on_chat_create BEFORE INSERT ON chats FOR EACH ROW EXECUTE PROCEDURE create_chat_table();
CREATE TRIGGER
app=# SELECT * FROM CHATS;
 id |    name    | people 
----+------------+--------
  3 | testchat_1 | {1}
  1 | testchat_1 | {1}
  0 | TESTCHAT   | {1}
  4 | name       | {1}
(4 rows)

app=# delete from chats;
DELETE 4
app=# INSERT INTO chats (name, people) VALUES ('testchat_1', ARRAY[3]);
ERROR:  control reached end of trigger procedure without RETURN
CONTEXT:  PL/pgSQL function create_chat_table()
app=# CREATE OR REPLACE FUNCTION create_chat_table() RETURNS TRIGGER AS $$ BEGIN EXECUTE('CREATE TABLE chat_' || NEW.id || ' (sender int NOT NULL, message text NOT NULL);'); RETURN NEW; END; $$ LANGUAGE PLPGSQL;
CREATE FUNCTION
app=# SELECT * FROM CHATS;
 id | name | people 
----+------+--------
(0 rows)

app=# INSERT INTO chats (name, people) VALUES ('testchat_1', ARRAY[3]);
INSERT 0 1
app=# \dt
         List of relations
 Schema |   Name    | Type  | Owner 
--------+-----------+-------+-------
 public | chat_6    | table | gavin
 public | chats     | table | gavin
 public | chats_log | table | gavin
 public | users     | table | gavin
(4 rows)

app=# SELECT * FROM CHAT_6;
 sender | message 
--------+---------
(0 rows)

app=# SELECT * FROM chats;
 id |    name    | people 
----+------------+--------
  6 | testchat_1 | {3}
(1 row)

app=# SELECT * FROM CHATS_LOG;
 chatid 
--------
(0 rows)

app=# DROP CHATS_LOG;
ERROR:  syntax error at or near "CHATS_LOG"
LINE 1: DROP CHATS_LOG;
             ^
app=# drop table chats_log;
DROP TABLE
app=# ALTER SEQUENCE users_id_seq RESTART;
ERROR:  relation "users_id_seq" does not exist
app=# ALTER SEQUENCE users_uid_seq RESTART;
ALTER SEQUENCE
app=# DELETE FROM USERS;
DELETE 1
app=# DELETE FROM CHATS;
DELETE 1
app=# DROP TABLE CHAT_6;
DROP TABLE
app=# \dt
       List of relations
 Schema | Name  | Type  | Owner 
--------+-------+-------+-------
 public | chats | table | gavin
 public | users | table | gavin
(2 rows)

app=# \dt+
                                 List of relations
 Schema | Name  | Type  | Owner | Persistence | Access method | Size  | Description 
--------+-------+-------+-------+-------------+---------------+-------+-------------
 public | chats | table | gavin | permanent   | heap          | 16 kB | 
 public | users | table | gavin | permanent   | heap          | 16 kB | 
(2 rows)

app=# \dS
                         List of relations
   Schema   |              Name               |   Type   |  Owner   
------------+---------------------------------+----------+----------
 pg_catalog | pg_aggregate                    | table    | postgres
 pg_catalog | pg_am                           | table    | postgres
 pg_catalog | pg_amop                         | table    | postgres
 pg_catalog | pg_amproc                       | table    | postgres
 pg_catalog | pg_attrdef                      | table    | postgres
 pg_catalog | pg_attribute                    | table    | postgres
 pg_catalog | pg_auth_members                 | table    | postgres
 pg_catalog | pg_authid                       | table    | postgres
 pg_catalog | pg_available_extension_versions | view     | postgres
 pg_catalog | pg_available_extensions         | view     | postgres
 pg_catalog | pg_backend_memory_contexts      | view     | postgres
 pg_catalog | pg_cast                         | table    | postgres
 pg_catalog | pg_class                        | table    | postgres
 pg_catalog | pg_collation                    | table    | postgres
 pg_catalog | pg_config                       | view     | postgres
 pg_catalog | pg_constraint                   | table    | postgres
 pg_catalog | pg_conversion                   | table    | postgres
 pg_catalog | pg_cursors                      | view     | postgres
 pg_catalog | pg_database                     | table    | postgres
 pg_catalog | pg_db_role_setting              | table    | postgres
 pg_catalog | pg_default_acl                  | table    | postgres
 pg_catalog | pg_depend                       | table    | postgres
 pg_catalog | pg_description                  | table    | postgres
 pg_catalog | pg_enum                         | table    | postgres
 pg_catalog | pg_event_trigger                | table    | postgres
 pg_catalog | pg_extension                    | table    | postgres
 pg_catalog | pg_file_settings                | view     | postgres
 pg_catalog | pg_foreign_data_wrapper         | table    | postgres
 pg_catalog | pg_foreign_server               | table    | postgres
 pg_catalog | pg_foreign_table                | table    | postgres
 pg_catalog | pg_group                        | view     | postgres
 pg_catalog | pg_hba_file_rules               | view     | postgres
 pg_catalog | pg_index                        | table    | postgres
 pg_catalog | pg_indexes                      | view     | postgres
 pg_catalog | pg_inherits                     | table    | postgres
 pg_catalog | pg_init_privs                   | table    | postgres
 pg_catalog | pg_language                     | table    | postgres
 pg_catalog | pg_largeobject                  | table    | postgres
 pg_catalog | pg_largeobject_metadata         | table    | postgres
 pg_catalog | pg_locks                        | view     | postgres
 pg_catalog | pg_matviews                     | view     | postgres
 pg_catalog | pg_namespace                    | table    | postgres
 pg_catalog | pg_opclass                      | table    | postgres
 pg_catalog | pg_operator                     | table    | postgres
 pg_catalog | pg_opfamily                     | table    | postgres
 pg_catalog | pg_partitioned_table            | table    | postgres
 pg_catalog | pg_policies                     | view     | postgres
 pg_catalog | pg_policy                       | table    | postgres
 pg_catalog | pg_prepared_statements          | view     | postgres
 pg_catalog | pg_prepared_xacts               | view     | postgres
 pg_catalog | pg_proc                         | table    | postgres
 pg_catalog | pg_publication                  | table    | postgres
 pg_catalog | pg_publication_rel              | table    | postgres
 pg_catalog | pg_publication_tables           | view     | postgres
 pg_catalog | pg_range                        | table    | postgres
 pg_catalog | pg_replication_origin           | table    | postgres
 pg_catalog | pg_replication_origin_status    | view     | postgres
 pg_catalog | pg_replication_slots            | view     | postgres
 pg_catalog | pg_rewrite                      | table    | postgres
 pg_catalog | pg_roles                        | view     | postgres
 pg_catalog | pg_rules                        | view     | postgres
 pg_catalog | pg_seclabel                     | table    | postgres
 pg_catalog | pg_seclabels                    | view     | postgres
 pg_catalog | pg_sequence                     | table    | postgres
 pg_catalog | pg_sequences                    | view     | postgres
 pg_catalog | pg_settings                     | view     | postgres
 pg_catalog | pg_shadow                       | view     | postgres
 pg_catalog | pg_shdepend                     | table    | postgres
 pg_catalog | pg_shdescription                | table    | postgres
 pg_catalog | pg_shmem_allocations            | view     | postgres
 pg_catalog | pg_shseclabel                   | table    | postgres
 pg_catalog | pg_stat_activity                | view     | postgres
 pg_catalog | pg_stat_all_indexes             | view     | postgres
 pg_catalog | pg_stat_all_tables              | view     | postgres
 pg_catalog | pg_stat_archiver                | view     | postgres
 pg_catalog | pg_stat_bgwriter                | view     | postgres
 pg_catalog | pg_stat_database                | view     | postgres
 pg_catalog | pg_stat_database_conflicts      | view     | postgres
 pg_catalog | pg_stat_gssapi                  | view     | postgres
 pg_catalog | pg_stat_progress_analyze        | view     | postgres
 pg_catalog | pg_stat_progress_basebackup     | view     | postgres
 pg_catalog | pg_stat_progress_cluster        | view     | postgres
 pg_catalog | pg_stat_progress_copy           | view     | postgres
 pg_catalog | pg_stat_progress_create_index   | view     | postgres
 pg_catalog | pg_stat_progress_vacuum         | view     | postgres
 pg_catalog | pg_stat_replication             | view     | postgres
 pg_catalog | pg_stat_replication_slots       | view     | postgres
 pg_catalog | pg_stat_slru                    | view     | postgres
 pg_catalog | pg_stat_ssl                     | view     | postgres
 pg_catalog | pg_stat_subscription            | view     | postgres
 pg_catalog | pg_stat_sys_indexes             | view     | postgres
 pg_catalog | pg_stat_sys_tables              | view     | postgres
 pg_catalog | pg_stat_user_functions          | view     | postgres
 pg_catalog | pg_stat_user_indexes            | view     | postgres
 pg_catalog | pg_stat_user_tables             | view     | postgres
 pg_catalog | pg_stat_wal                     | view     | postgres
 pg_catalog | pg_stat_wal_receiver            | view     | postgres
 pg_catalog | pg_stat_xact_all_tables         | view     | postgres
app=# 
app=# \dS[chats];
                         List of relations
   Schema   |              Name               |   Type   |  Owner   
------------+---------------------------------+----------+----------
 pg_catalog | pg_aggregate                    | table    | postgres
 pg_catalog | pg_am                           | table    | postgres
 pg_catalog | pg_amop                         | table    | postgres
 pg_catalog | pg_amproc                       | table    | postgres
 pg_catalog | pg_attrdef                      | table    | postgres
 pg_catalog | pg_attribute                    | table    | postgres
 pg_catalog | pg_auth_members                 | table    | postgres
 pg_catalog | pg_authid                       | table    | postgres
 pg_catalog | pg_available_extension_versions | view     | postgres
 pg_catalog | pg_available_extensions         | view     | postgres
 pg_catalog | pg_backend_memory_contexts      | view     | postgres
 pg_catalog | pg_cast                         | table    | postgres
 pg_catalog | pg_class                        | table    | postgres
 pg_catalog | pg_collation                    | table    | postgres
 pg_catalog | pg_config                       | view     | postgres
 pg_catalog | pg_constraint                   | table    | postgres
 pg_catalog | pg_conversion                   | table    | postgres
 pg_catalog | pg_cursors                      | view     | postgres
 pg_catalog | pg_database                     | table    | postgres
 pg_catalog | pg_db_role_setting              | table    | postgres
 pg_catalog | pg_default_acl                  | table    | postgres
 pg_catalog | pg_depend                       | table    | postgres
 pg_catalog | pg_description                  | table    | postgres
 pg_catalog | pg_enum                         | table    | postgres
 pg_catalog | pg_event_trigger                | table    | postgres
 pg_catalog | pg_extension                    | table    | postgres
 pg_catalog | pg_file_settings                | view     | postgres
 pg_catalog | pg_foreign_data_wrapper         | table    | postgres
 pg_catalog | pg_foreign_server               | table    | postgres
 pg_catalog | pg_foreign_table                | table    | postgres
 pg_catalog | pg_group                        | view     | postgres
 pg_catalog | pg_hba_file_rules               | view     | postgres
 pg_catalog | pg_index                        | table    | postgres
 pg_catalog | pg_indexes                      | view     | postgres
 pg_catalog | pg_inherits                     | table    | postgres
 pg_catalog | pg_init_privs                   | table    | postgres
 pg_catalog | pg_language                     | table    | postgres
 pg_catalog | pg_largeobject                  | table    | postgres
 pg_catalog | pg_largeobject_metadata         | table    | postgres
 pg_catalog | pg_locks                        | view     | postgres
 pg_catalog | pg_matviews                     | view     | postgres
 pg_catalog | pg_namespace                    | table    | postgres
 pg_catalog | pg_opclass                      | table    | postgres
 pg_catalog | pg_operator                     | table    | postgres
 pg_catalog | pg_opfamily                     | table    | postgres
 pg_catalog | pg_partitioned_table            | table    | postgres
 pg_catalog | pg_policies                     | view     | postgres
 pg_catalog | pg_policy                       | table    | postgres
 pg_catalog | pg_prepared_statements          | view     | postgres
 pg_catalog | pg_prepared_xacts               | view     | postgres
 pg_catalog | pg_proc                         | table    | postgres
 pg_catalog | pg_publication                  | table    | postgres
 pg_catalog | pg_publication_rel              | table    | postgres
 pg_catalog | pg_publication_tables           | view     | postgres
 pg_catalog | pg_range                        | table    | postgres
 pg_catalog | pg_replication_origin           | table    | postgres
 pg_catalog | pg_replication_origin_status    | view     | postgres
 pg_catalog | pg_replication_slots            | view     | postgres
 pg_catalog | pg_rewrite                      | table    | postgres
 pg_catalog | pg_roles                        | view     | postgres
 pg_catalog | pg_rules                        | view     | postgres
 pg_catalog | pg_seclabel                     | table    | postgres
 pg_catalog | pg_seclabels                    | view     | postgres
 pg_catalog | pg_sequence                     | table    | postgres
 pg_catalog | pg_sequences                    | view     | postgres
 pg_catalog | pg_settings                     | view     | postgres
 pg_catalog | pg_shadow                       | view     | postgres
 pg_catalog | pg_shdepend                     | table    | postgres
 pg_catalog | pg_shdescription                | table    | postgres
 pg_catalog | pg_shmem_allocations            | view     | postgres
 pg_catalog | pg_shseclabel                   | table    | postgres
 pg_catalog | pg_stat_activity                | view     | postgres
 pg_catalog | pg_stat_all_indexes             | view     | postgres
 pg_catalog | pg_stat_all_tables              | view     | postgres
 pg_catalog | pg_stat_archiver                | view     | postgres
 pg_catalog | pg_stat_bgwriter                | view     | postgres
 pg_catalog | pg_stat_database                | view     | postgres
 pg_catalog | pg_stat_database_conflicts      | view     | postgres
 pg_catalog | pg_stat_gssapi                  | view     | postgres
 pg_catalog | pg_stat_progress_analyze        | view     | postgres
 pg_catalog | pg_stat_progress_basebackup     | view     | postgres
 pg_catalog | pg_stat_progress_cluster        | view     | postgres
 pg_catalog | pg_stat_progress_copy           | view     | postgres
 pg_catalog | pg_stat_progress_create_index   | view     | postgres
 pg_catalog | pg_stat_progress_vacuum         | view     | postgres
 pg_catalog | pg_stat_replication             | view     | postgres
 pg_catalog | pg_stat_replication_slots       | view     | postgres
 pg_catalog | pg_stat_slru                    | view     | postgres
 pg_catalog | pg_stat_ssl                     | view     | postgres
 pg_catalog | pg_stat_subscription            | view     | postgres
 pg_catalog | pg_stat_sys_indexes             | view     | postgres
 pg_catalog | pg_stat_sys_tables              | view     | postgres
 pg_catalog | pg_stat_user_functions          | view     | postgres
 pg_catalog | pg_stat_user_indexes            | view     | postgres
 pg_catalog | pg_stat_user_tables             | view     | postgres
 pg_catalog | pg_stat_wal                     | view     | postgres
 pg_catalog | pg_stat_wal_receiver            | view     | postgres
 pg_catalog | pg_stat_xact_all_tables         | view     | postgres
 pg_catalog | pg_stat_xact_sys_tables         | view     | postgres
 pg_catalog | pg_stat_xact_user_functions     | view     | postgres
 pg_catalog | pg_stat_xact_user_tables        | view     | postgres
 pg_catalog | pg_statio_all_indexes           | view     | postgres
 pg_catalog | pg_statio_all_sequences         | view     | postgres
 pg_catalog | pg_statio_all_tables            | view     | postgres
 pg_catalog | pg_statio_sys_indexes           | view     | postgres
 pg_catalog | pg_statio_sys_sequences         | view     | postgres
 pg_catalog | pg_statio_sys_tables            | view     | postgres
 pg_catalog | pg_statio_user_indexes          | view     | postgres
 pg_catalog | pg_statio_user_sequences        | view     | postgres
 pg_catalog | pg_statio_user_tables           | view     | postgres
 pg_catalog | pg_statistic                    | table    | postgres
 pg_catalog | pg_statistic_ext                | table    | postgres
 pg_catalog | pg_statistic_ext_data           | table    | postgres
 pg_catalog | pg_stats                        | view     | postgres
 pg_catalog | pg_stats_ext                    | view     | postgres
 pg_catalog | pg_stats_ext_exprs              | view     | postgres
 pg_catalog | pg_subscription                 | table    | postgres
 pg_catalog | pg_subscription_rel             | table    | postgres
 pg_catalog | pg_tables                       | view     | postgres
 pg_catalog | pg_tablespace                   | table    | postgres
 pg_catalog | pg_timezone_abbrevs             | view     | postgres
 pg_catalog | pg_timezone_names               | view     | postgres
 pg_catalog | pg_transform                    | table    | postgres
 pg_catalog | pg_trigger                      | table    | postgres
 pg_catalog | pg_ts_config                    | table    | postgres
 pg_catalog | pg_ts_config_map                | table    | postgres
 pg_catalog | pg_ts_dict                      | table    | postgres
 pg_catalog | pg_ts_parser                    | table    | postgres
 pg_catalog | pg_ts_template                  | table    | postgres
 pg_catalog | pg_type                         | table    | postgres
 pg_catalog | pg_user                         | view     | postgres
 pg_catalog | pg_user_mapping                 | table    | postgres
 pg_catalog | pg_user_mappings                | view     | postgres
 pg_catalog | pg_views                        | view     | postgres
 public     | chats                           | table    | gavin
 public     | chats_id_seq                    | sequence | gavin
 public     | users                           | table    | gavin
 public     | users_uid_seq                   | sequence | gavin
(138 rows)

app=# SELECT  event_object_table AS table_name ,trigger_name         
app-# FROM information_schema.triggers  
app-# GROUP BY table_name , trigger_name 
app-# ORDER BY table_name ,trigger_name 
app-# ;
 table_name |  trigger_name  
------------+----------------
 chats      | on_chat_create
(1 row)

app=# \q
gavin@Gavins-MacBook-Pro ~ % clear

gavin@Gavins-MacBook-Pro ~ % mpsql;
psql (14.0)
Type "help" for help.

app=# \q
gavin@Gavins-MacBook-Pro ~ % clear



















































gavin@Gavins-MacBook-Pro ~ % mpsql;
psql (14.0)
Type "help" for help.

app=# \q
gavin@Gavins-MacBook-Pro ~ % clear






















































gavin@Gavins-MacBook-Pro ~ % mpsql;
psql: error: connection to server on socket "/tmp/.s.PGSQL.5433" failed: No such file or directory
	Is the server running locally and accepting connections on that socket?
gavin@Gavins-MacBook-Pro ~ % clear
























































gavin@Gavins-MacBook-Pro ~ % mpsql;
psql (14.1)
Type "help" for help.

app=# \q
gavin@Gavins-MacBook-Pro ~ % clear






















































gavin@Gavins-MacBook-Pro ~ % 



























































